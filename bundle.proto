syntax = "proto3";

import "packet.proto";
import "shared.proto";

package bundle;

message Bundle {
  shared.Header header = 2;
  repeated packet.Packet packets = 3;
}

message BundleUuid {
  bundle.Bundle bundle = 1;
  string uuid = 2;
}

/* Bundle Result Types */

// Indicates the bundle was accepted and forwarded to a validator.
// NOTE: A single bundle may have multiple events emitted if forwarded to many validators.
message Accepted {
  // Slot at which bundle was forwarded.
  uint64 slot = 1;

  // Validator identity bundle was forwarded to.
  string validator_identity = 2;
}

// Indicates the bundle was dropped and therefore not forwarded to any validator.
message Rejected {
  oneof reason {
    StateAuctionBidRejected state_auction_bid_rejected = 1;
    WinningBatchBidRejected winning_batch_bid_rejected = 2;
    SimulationFailure simulation_failure = 3;
    InternalError internal_error = 4;
    DroppedBundle dropped_bundle = 5;
  }
}

// Indicates the bundle's bid was high enough to win its state auction.
// However, not high enough relative to other state auction winners and therefore excluded from being forwarded.
message WinningBatchBidRejected {
  // Auction's unique identifier.
  string auction_id = 1;
  // Bundle's simulated bid.
  uint64 simulated_bid_lamports = 2;
  optional string msg = 3;
}

// Indicates the bundle's bid was __not__ high enough to be included in its state auction's set of winners.
message StateAuctionBidRejected {
  // Auction's unique identifier.
  string auction_id = 1;
  // Bundle's simulated bid.
  uint64 simulated_bid_lamports = 2;
  optional string msg = 3;
}

// Bundle failed validation due to simulation failure.
message SimulationFailure {
  // Signature of the offending transaction.
  string tx_signature = 1;

  // Optional error log.
  optional string msg = 2;
}

// Bundle dropped due to an internal error.
message InternalError {
  string msg = 1;
}

// Bundle dropped (e.g. because no leader upcoming)
message DroppedBundle {
  string msg = 1;
}

message FinalizedLegacy {}
message ProcessedLegacy {
  string validator_identity = 1;
  uint64 slot = 2;
  /// Index within the block.
  uint64 bundle_index = 3;
}
message Dropped {
  DroppedReason reason = 1;
}
enum DroppedReason {
  BlockhashExpired = 0;
  // One or more transactions in the bundle landed on-chain, invalidating the bundle.
  PartiallyProcessed = 1;
  // This indicates bundle was processed but not finalized. This could occur during forks.
  NotFinalized = 2;
}

message BundleResult {
  // Bundle's Uuid.
  string bundle_id = 1;

  oneof result {
    // Indicated accepted by the block-engine and forwarded to a jito-solana validator.
    Accepted accepted = 2;
    // Rejected by the block-engine.
    Rejected rejected = 3;
    // Reached finalized commitment level.
    FinalizedLegacy finalized = 4;
    // Reached a processed commitment level.
    ProcessedLegacy processed = 5;
    // Was accepted and forwarded by the block-engine but never landed on-chain.
    Dropped dropped = 6;
  }
}

/** BundleStatus types */

enum CommitmentLevel {
  Processed = 0;
  Confirmed = 1;
  Finalized = 2;
}
message LandedInBlock {
  string validator_identity = 1;
  uint64 slot = 2;
  uint64 bundle_start_index = 3;
  uint64 bundle_end_index = 4;
  CommitmentLevel commitment_level = 5;
}

// Indicates the bundle won an auction and was forwarded to validators.
message ForwardedToValidator {
  // Point in time at which the bundle was forwarded.
  uint64 slot_forwarded_at = 1;
}

// Bundle expired and pruned from mempool.
message ExpiredAndPruned {
  // Bundle expirations are determined by the transaction with the oldest blockhash.
  string expired_signature = 1;

  // The slot this blockhash was checked at.
  uint64 slot_checked_at = 2;

  // The expiration slot of the blockhash.
  uint64 slot_expired_at = 3;
}

// Bundle contains transactions that have already processed on-chain.
message ContainsAlreadyProcessedSignatures {
  repeated string signatures = 1;
}

message Outbid {
  // The highest bidding bundle in the auction.
  uint64 highest_auction_bid = 1;

  // Indicates whether the bundle was pruned from the mempool.
  // e.g.
  //  If a bundle in the batch that won the auction would invalidate this bundle then it would be pruned.
  //  However, if this bundle was excluded from forwarding because the total forwarded bundles during the
  //  auction window would exceed the limit, then it would be kept around in the mempool for subsequent auctions.
  bool pruned_from_mempool = 2;
}

message BundleStatus {
  // Bundle's Uuid.
  string bundle_id = 1;

  // Mempool region this notification came from.
  string mempool_region = 2;

  oneof result {
    // Bundle was forwarded to validators.
    ForwardedToValidator forwarded_to_validator = 3;

    // Bundle failed simulation against the latest state of the chain.
    SimulationFailure simulation_failure = 4;

    // Bundle executed successfully and landed in a block.
    LandedInBlock landed_in_block = 5;

    // Bundle was out bid in an auction.
    Outbid outbid = 7;

    // Bundle expired and was pruned from the mempool.
    ExpiredAndPruned expired_and_pruned = 8;

    // Some unknown, internal error occurred.
    InternalError internal_error = 100;
  }
}
