syntax = "proto3";

import "packet.proto";
import "shared.proto";
import "bundle.proto";

package validator_interface;

message ConnectionInit{
    bool push = 1;
    bool pull = 2;
}

message PacketStreamMSG {
  oneof msg {
    ConnectionInit init = 1;
    packet.PacketBatchList batch_list = 2;
    shared.header heartbeat = 3;
  }
}

message GetTpuConfigsRequest {}
message GetTpuConfigsResponse {
  shared.Socket tpu = 1;
  shared.Socket tpu_forward = 2;
}


message SubscribeBundlesRequest {}
message SubscribeBundlesResponse {
  repeated bundle.Bundle bundles = 1;
}

message addAOI { repeated string accounts = 1;}
// "*" adds to all accounts
message removeAOI { repeated string accounts = 1;}
// "*" removes to all accounts

message AOISubRequest {}
message AOISubResponse {
  oneof msg {
    addAOI add = 1;
    removeAOI rem = 2;
  }
}

service ValidatorInterface {
  // RPC endpoint to get the tpu `IP:PORT` to direct client traffic to from the validator.
  rpc GetTpuConfigs (GetTpuConfigsRequest) returns (GetTpuConfigsResponse) {}
  // RPC endpoint for validator to pull packets or relayer to push packets
  rpc StartBiDirectionalPacketStream (stream PacketStreamMSG) returns (stream PacketStreamMSG) {}
  // RPC endpoint for the validator to subscribe to bundles from block engine
  rpc SubscribeBundles (SubscribeBundlesRequest) returns (stream SubscribeBundlesResponse) {}
  // RPC endpoint for relayer to subscribe to accounts of interest from block engine
  rpc SubscribeAOI(AOISubRequest) returns (stream AOISubResponse) {}

}
