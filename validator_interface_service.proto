syntax = "proto3";

import "google/protobuf/timestamp.proto";

import "packet.proto";
import "shared.proto";
import "bundle.proto";

package validator_interface;

/// ---------------------------------
/// TPU Configuration
/// ---------------------------------

message GetTpuConfigsRequest {}
message GetTpuConfigsResponse {
  shared.Socket tpu = 1;
  shared.Socket tpu_forward = 2;
}

/// ---------------------------------
/// Packet Streams
/// ---------------------------------

message Heartbeat {
  uint64 count = 1;
  google.protobuf.Timestamp ts = 2;
}

// A list of packet batches that has an expiry time attached to it.
message ExpiringPacketBatches {
  // contains a timestamp for when this packet was generated
  shared.Header header = 1;
  repeated packet.PacketBatch batch_list = 2;
  // how long after the header timestamp this batch list expires in milliseconds
  uint32 expiry_ms = 3;
}

message PacketStreamMsg {
  // Packets and heartbeats are sent over the same stream.
  // ExpiringPacketBatches have an expiration attached to them so the block engine can track
  // how long it has until the relayer forwards the packets to the validator.
  // Heartbeats contain a timestamp from the system and is used as a simple and naive time-sync mechanism
  // so the block engine has some idea on how far their clocks are apart.
  oneof msg {
    ExpiringPacketBatches batches = 1;
    Heartbeat heartbeat = 2;
  }
}

/// ---------------------------------
/// Bundles
/// ---------------------------------

message SubscribeBundlesRequest {}
message SubscribeBundlesResponse {
  repeated bundle.Bundle bundles = 1;
}

/// ---------------------------------
/// Accounts Of Interest
/// ---------------------------------

message AddAoi {
  // "*" adds to all accounts
  repeated string accounts = 1;
}
message RemoveAoi {
  // "*" removes to all accounts
  repeated string accounts = 1;
}

message AoiSubRequest {}
message AoiSubResponse {
  oneof msg {
    AddAoi add = 1;
    RemoveAoi rem = 2;
  }
}

service ValidatorInterface {
  // RPC endpoint to get the tpu `IP:PORT` to direct client traffic to from the validator.
  rpc GetTpuConfigs (GetTpuConfigsRequest) returns (GetTpuConfigsResponse) {}
  // RPC endpoint for validator to pull packets or relayer to push packets
  rpc StartBiDirectionalPacketStream (stream PacketStreamMsg) returns (stream PacketStreamMsg) {}
  // RPC endpoint for the validator to subscribe to bundles from block engine
  rpc SubscribeBundles (SubscribeBundlesRequest) returns (stream SubscribeBundlesResponse) {}
  // RPC endpoint for relayer to subscribe to accounts of interest from block engine
  rpc SubscribeAOI(AoiSubRequest) returns (stream AoiSubResponse) {}
}
